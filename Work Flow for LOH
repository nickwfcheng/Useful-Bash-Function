##Bash - Filtering/Extracting germ cell sample data
#Removing indels and multiallelic snps 
vcftools --gzvcf input.vcf.gz --max-alleles 2 --remove-indels --recode --out outputname

#Removing information starting wtih ##
grep -v '^##' input.file > output.file

#Cutting unwanted columns
cut --complement -f3,6,7,8,9 input.file > output.file

#Keeping only hetero-/homozygous information in samples
sed 's/\:\S*//g' input.file > output.file

#Removing '#' from  Chrom in header
sed 's/#//'

#Overall germline pipline 1
grep -v '^##' input.file | cut --complement -f3,6,7,8,9 | sed 's/\:\S*//g' | sed 's/#//'

##Bash - Extracting tumor cell data
#Pipeline to extract chr, position, mutations, REF, ALT, info(VAF, talt count and t_ref_count)
zcat | grep -v '^##' | cut --complement -f3,6,7 | 

#Removing everything before VAF
sed 's/Callers.*VAF/VAF/' 

#Removing everything remaining before VAF
sed 's/1000.*VAF/VAF/' 

#Removing everything between cosmic and t_alt
sed 's/cosmic.*;t_alt/t_alt/'
sed 's/dbsnp.*;t_alt/t_alt/'
sed 's/repeat.*;t_alt/t_alt/'

# Removing everything after allele count
sed 's/$/placeholder/'
sed 's/;Variant_Classification.*placeholder//'

# Removing # on Chrom
sed 's/#//'

#Overall tumor pipeline 2
for i in *.gz; do zcat $i| grep -v '^##' | cut --complement -f3,6,7 | sed 's/Callers.*VAF/VAF/' | sed 's/1000g.*VAF/VAF/' | sed 's/cosmic.*;t_alt/t_alt/' | sed 's/dbsnp.*;t_alt/t_alt/' | sed 's/repeat.*;t_alt/t_alt/' | sed 's/$/placeholder/' | sed 's/;Variant_Classification.*placeholder//' | sed 's/;snv_near_indel//' | sed 's/placeholder//' | sed 's/#//' > "$i.filt.txt" ; done



##R - Cleaning/combining data
#Import germ samples into R as df
germ_data = read.table(file = 'first5.txt', sep = '\t', header = T)

#Import tumor samples into R as list of df
tumor_files = list.files(pattern = "*.filt.txt")
tumor_data = lapply(tumor_files, read.table, sep = '\t', header = T)
tumor_sample_id = gsub('.consensus.*', '', tumor.files)

#Joining chrom and pos together for germline samples
chrom_pos = paste(germ_data$CHROM, germ_data$POS, sep=':')
germ_data_1 = cbind(chrom_pos, germ_data)
rm(chrom_pos)
germ_data_1 = germ_data_1[,-2]
germ_data_1 = germ_data_1[,-2]

#Cleaning germline sample headings
colnames(germ_data_1) = sub("X", "", colnames(germ_data_1))

#Joining tumor dataframes together
merge.all <- function(x, y) {
  merge(x, y, all=TRUE, by=c('CHROM', 'POS', 'REF', 'ALT'))
}
tumor_data_combined <- Reduce(merge.all, tumor_data)
tumor_sample_id = gsub('.consensus.*', '', tumor.files)
colnames(tumor_data_combined) = c('CHROM', 'POS', 'REF', 'ALT', tumor_sample_id)
rm(merge.all)

#Joining chrom and pos together for germline samples
chrom_pos = paste(tumor_data_combined$CHROM, tumor_data_combined$POS, sep=':')
tumor_data_combined_1 = cbind(chrom_pos, tumor_data_combined)
rm(chrom_pos)
tumor_data_combined_1 = tumor_data_combined_1[,-2]
tumor_data_combined_1 = tumor_data_combined_1[,-2]

##R - Detecting matching chrom positions between tumor and germ cell samples
#Determine whether variant is present at chr position in each tumor sample
tumor_data_binary = tumor_data_combined_1
tumor_data_binary[4:ncol(tumor_data_binary)] = ifelse(is.na(tumor_data_binary[4:ncol(tumor_data_binary)]) == T, 0, 1)


#To do
#Convert header of germ cell data into same sample id of tumor data


#Check unmatching dataframes column names
https://stackoverflow.com/questions/28782654/r-finding-unmatched-column-names-of-data-frames
setdiff(germ_data_1, tumor_data_binary)

#Remove unmatching dataframe column names


#Order column names 
germ_data_1[,order(colnames(germ_data_1))]
tumor_data_binary[,order(colnames(tumor_data_binary))]

#Convert dataframes into list containing individual columns

#Merge list of dataframes based on similar column names

#




