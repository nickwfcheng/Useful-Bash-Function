##Bash - Filtering/Extracting germ cell sample data
#Removing indels and multiallelic snps 
vcftools --gzvcf input.vcf.gz --max-alleles 2 --remove-indels --recode --out outputname

#Removing information starting wtih ##
grep -v '^##' input.file > output.file

#Cutting unwanted columns
cut --complement -f3,6,7,8,9 input.file > output.file

#Keeping only hetero-/homozygous information in samples
sed 's/\:\S*//g' input.file > output.file

#Removing '#' from  Chrom in header
sed 's/#//'

#Overall germline pipline 1
grep -v '^##' input.file | cut --complement -f3,6,7,8,9 | sed 's/\:\S*//g' | sed 's/#//'

##Bash - Extracting tumor cell data
#Pipeline to extract chr, position, mutations, REF, ALT, info(VAF, talt count and t_ref_count)
zcat | grep -v '^##' | cut --complement -f3,6,7 | 

#Removing everything before VAF
sed 's/Callers.*VAF/VAF/'f

#Removing everything remaining before VAF
sed 's/1000.*VAF/VAF/' 

#Removing everything between cosmic and t_alt
sed 's/cosmic.*;t_alt/t_alt/'
sed 's/dbsnp.*;t_alt/t_alt/'
sed 's/repeat.*;t_alt/t_alt/'

# Removing everything after allele count
sed 's/$/placeholder/'
sed 's/;Variant_Classification.*placeholder//'

# Removing # on Chrom
sed 's/#//'

#Overall tumor pipeline 2
for i in *.gz; do zcat $i| grep -v '^##' | cut --complement -f3,6,7 | sed 's/Callers.*VAF/VAF/' | sed 's/1000g.*VAF/VAF/' | sed 's/cosmic.*;t_alt/t_alt/' | sed 's/dbsnp.*;t_alt/t_alt/' | sed 's/repeat.*;t_alt/t_alt/' | sed 's/$/placeholder/' | sed 's/;Variant_Classification.*placeholder//' | sed 's/;snv_near_indel//' | sed 's/placeholder//' | sed 's/#//' > "$i.filt.txt" ; done



##R - Cleaning/combining data
#Import germ samples into R as df
germ_data = read.table(file = 'first5.txt', sep = '\t', header = T)

#Import tumor samples into R as list of df
tumor_files = list.files(pattern = "*.filt.txt")
tumor_data = lapply(tumor_files, read.table, sep = '\t', header = T)
tumor_sample_id = gsub('.consensus.*', '', tumor.files)

#Joining chrom and pos together for germline samples
chrom_pos = paste(germ_data$CHROM, germ_data$POS, sep=':')
germ_data_1 = cbind(chrom_pos, germ_data)
rm(chrom_pos)
germ_data_1 = germ_data_1[,-2]
germ_data_1 = germ_data_1[,-2]

#Cleaning germline sample headings
colnames(germ_data_1) = sub("X", "", colnames(germ_data_1))

#Joining tumor dataframes together
merge.all <- function(x, y) {
  merge(x, y, all=TRUE, by=c('CHROM', 'POS', 'REF', 'ALT'))
}
tumor_data_combined <- Reduce(merge.all, tumor_data)
tumor_sample_id = gsub('.consensus.*', '', tumor.files)
colnames(tumor_data_combined) = c('CHROM', 'POS', 'REF', 'ALT', tumor_sample_id)
rm(merge.all)

#Joining chrom and pos together for germline samples
chrom_pos = paste(tumor_data_combined$CHROM, tumor_data_combined$POS, sep=':')
tumor_data_combined_1 = cbind(chrom_pos, tumor_data_combined)
rm(chrom_pos)
tumor_data_combined_1 = tumor_data_combined_1[,-2]
tumor_data_combined_1 = tumor_data_combined_1[,-2]

##R - Detecting matching chrom positions between tumor and germ cell samples
#Determine whether variant is present at chr position in each tumor sample
tumor_data_binary = tumor_data_combined_1
tumor_data_binary[4:ncol(tumor_data_binary)] = ifelse(is.na(tumor_data_binary[4:ncol(tumor_data_binary)]) == T, 0, 1)

#Renaming and removing unneeded files
tumor_data = tumor_data_combined_1
germ_data = germ_data_1
rm(germ_data_1)
rm(tumor_data_combined_1)
rm(tumor_data_combined)

#Transposing dataframes
germ_data_t = t(germ_data)
tumor_data_t = t(tumor_data)

#Importing germ and tumor sample ids
id_df = read.csv(file = 'id_no.csv', header = T)
id_df = id_df[,1:3]
colnames(id_df) = c('germ_data_t_id', 'tumor_data_t_id', 'tumor_type')
id_df = id_df[c(3,1,2)]
x = str_split_fixed(id_df$tumor_data_t_id, ",", 10)
id_df = id_df[1:2]
id_df = cbind(id_df, x)

#Transposing germ and tumor data, then extracting column names as dataframes
germ_data_t_id = germ_data_t[,1] 
germ_data_t_id = germ_data_t_id[-1]
germ_data_t_id = germ_data_t_id[-1]
germ_data_t_id = germ_data_t_id[-1]
for (i in 1:length(germ_data_t_id)) {
  tmp = 3+i
  germ_data_t_id[i] = rownames(germ_data_t)[tmp]
}
germ_data_t_id = as.data.frame(germ_data_t_id)

tumor_data_t_id = tumor_data_t[,1] 
tumor_data_t_id = tumor_data_t_id[-1]
tumor_data_t_id = tumor_data_t_id[-1]
tumor_data_t_id = tumor_data_t_id[-1]
for (i in 1:length(tumor_data_t_id)) {
  tmp = 3+i
  tumor_data_t_id[i] = rownames(tumor_data_t)[tmp]
}
tumor_data_t_id = as.data.frame(tumor_data_t_id)

#Matching germ cell id to tumor cell dataframe
tumor_data_t_id[,2] = 1
colnames(tumor_data_t_id)[2] = 'germ_data_t_id'
for (i in 4:12) {
  tumor_data_t_id$germ_data_t_id = id_df[match(tumor_data_t_id$tumor_data_t_id, id_df[,3]), 2]
  tumor_data_t_id$germ_data_t_id[is.na(tumor_data_t_id$germ_data_t_id)] = id_df[match(tumor_data_t_id$tumor_data_t_id, id_df[,i]), 2]
}
tumor_data_gid = tumor_data_t[4:nrow(tumor_data_t),]
rownames(tumor_data_gid) = tumor_data_t_id[,2]
tumor_data_t_gid = rbind(tumor_data_t[1:3,], tumor_data_t_gid)

#Fixing germ data name
rownames(germ_data_t) = gsub('[.]','-',rownames(germ_data_t))

#Converting transpose dataframes back to normal
tumor_data_gid = t(tumor_data_t_gid)
germ_data_gid = t(germ_data_t)

#Change colnames of binary tumor df to germline ids
tumor_data_binary_gid = tumor_data_binary
colnames(tumor_data_binary_gid)[4:ncol(tumor_data_binary_gid)] = colnames(tumor_data_gid)[4:ncol(tumor_data_gid)]

#Only keeping VAF values in tumor dataframe
tumor_data_gid_vaf = gsub(';t_alt_count.*', '', tumor_data_gid)
tumor_data_gid_vaf = gsub(';t_ref_count.*', '', tumor_data_gid_vaf)
tumor_data_gid_vaf = gsub('Callers.*', NA, tumor_data_gid_vaf)
tumor_data_gid_vaf = gsub(';.*', '', tumor_data_gid_vaf)
tumor_data_gid_vaf = gsub('VAF=', '', tumor_data_gid_vaf)
tumor_data_gid_vaf[is.na(tumor_data_gid_vaf)] <- 0
tumor_data_gid_vaf = as.data.frame(tumor_data_gid_vaf)
for (i in 4:ncol(tumor_data_gid_vaf)) {
  tumor_data_gid_vaf[,i] = as.numeric(as.character(tumor_data_gid_vaf[,i]))
}

#Filtering unmatching rows between df's 
germ_data_gid = as.data.frame(germ_data_gid);
library(dplyr);
germ_data_gid[,1] = as.character(germ_data_gid[,1])
tumor_data_gid_vaf[,1] = as.character(tumor_data_gid_vaf[,1])
germ_df_filt = semi_join(germ_data_gid, tumor_data_gid_vaf, by = 'chrom_pos');
tumor_df_filt = semi_join(tumor_data_gid_vaf, germ_data_gid, by = 'chrom_pos');
germ_unmatch_pos= setdiff(germ_data_gid[,1], tumor_data_gid_vaf[,1]);
tumor_unmatch_pos = setdiff(tumor_data_gid_vaf[,1], germ_data_gid[,1]);

#Moving filtered dfs to new R file
saveRDS(germ_df_filt, 'germ_df');
saveRDS(tumor_df_filt, 'tumor_df');

##In new R
germ_df = readRDS('germ_df')
tumor_df = readRDS('tumor_df')

#Removing unmatching column names (ids)
unmatching_id_tumor = setdiff(names(tumor_df), names(germ_df));
for (i in length(unmatching_id_tumor)) {
  germ_df[,unmatching_id_tumor[i]] = NULL
};
unmatching_id_germ = setdiff(names(germ_df), names(tumor_df));
for (i in length(unmatching_id_germ)) {
  germ_df[,unmatching_id_germ[i]] = NULL
};

#Diving between homo-(0) or hetero-(1) positions for germ sample
for (i in 1:ncol(germ_df)) {
  germ_df[,i] = as.character(germ_df[,i])
}
germ_df[4:ncol(germ_df)] = ifelse(germ_df[4:ncol(germ_df)] == '0/1' | germ_df[4:ncol(germ_df)] =='1/0' , 1, 0)
for (i in 1:ncol(germ_df)) {
  germ_df[,i] = as.factor(germ_df[,i])
}

#Reorder samples alphabetically
tmp = germ_df[,-c(1:3)]
tmp1 = germ_df[,c(1:3)]
tmp = tmp[,order(names(tmp))]
germ_df = cbind(tmp1, tmp)

tmp = tumor_df[,-c(1:3)]
tmp1 = tumor_df[,c(1:3)]
tmp = tmp[,order(names(tmp))]
tumor_df = cbind(tmp1, tmp)
rm(tmp)
rm(tmp1)

#Reorder chromosomes 
library(stringr)
tumor_chrpos = str_split_fixed(tumor_df$'chrom_pos', ":", 2)
colnames(tumor_chrpos)[1:2] = c('chr','chrpos')
tumor_df = cbind(tumor_chrpos, tumor_df[,-1])

germ_chrpos = str_split_fixed(germ_df$'chrom_pos', ":", 2)
colnames(germ_chrpos)[1:2] = c('chr','chrpos')
germ_df = cbind(germ_chrpos, germ_df[,-1])

tumor_df[,1] = as.factor(as.character(tumor_df[,1]))
tumor_df[,2] = as.numeric(as.character(tumor_df[,2]))
tumor_df[,1] = ordered(tumor_df[,1], levels = c('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','X','Y'))
tumor_df = tumor_df[order(tumor_df$chr,tumor_df$chrpos),]
row.names(tumor_df) <- 1:nrow(tumor_df)

germ_df[,1] = as.factor(as.character(germ_df[,1]))
germ_df[,2] = as.numeric(as.character(germ_df[,2]))
germ_df[,1] = ordered(germ_df[,1], levels = c('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','X','Y'))
germ_df = germ_df[order(germ_df$chr,germ_df$chrpos),]
row.names(germ_df) <- 1:nrow(germ_df)

#Joining chrom and pos together again
germ_df[,1] = as.character(germ_df[,1])
germ_df[,2] = as.character(germ_df[,2])
chrom_pos = as.character(paste(germ_df$chr, germ_df$chrpos, sep=':'))
germ_df = cbind(chrom_pos, germ_df)
rm(chrom_pos)
germ_df = germ_df[,-2]
germ_df = germ_df[,-2]

tumor_df[,1] = as.character(tumor_df[,1])
tumor_df[,2] = as.character(tumor_df[,2])
chrom_pos = as.character(paste(tumor_df$chr, tumor_df$chrpos, sep=':'))
tumor_df = cbind(chrom_pos,tumor_df)
rm(chrom_pos)
tumor_df = tumor_df[,-2]
tumor_df = tumor_df[,-2]

tumor_df[tumor_df == 0] <- NA

#Breaking down dataframe to list of df for each sample
tumor_df[,1] = as.character(tumor_df[,1])
tumor_list = list()
for (i in 4:ncol(tumor_df)) {
  num = i - 3
  tmp = tumor_df[,c(1:3)]
  tmp1 = tumor_df[,i]  
  tumor_list[[num]] = cbind(tmp, tmp1)
  colnames(tumor_list[[num]])[4] = colnames(tumor_df)[i]
}
for (i in 1:5) { 
  tumor_list[[i]] = tumor_list[[i]][,c(1,4)]
}

germ_df[,1] = as.character(germ_df[,1])
germ_list = list()
for (i in 4:ncol(germ_df)) {
  num = i - 3
  tmp = germ_df[,c(1:3)]
  tmp1 = germ_df[,i]  
  germ_list[[num]] = cbind(tmp, tmp1)
  colnames(germ_list[[num]])[4] = colnames(germ_df)[i]
}

#Merging list of dfs
merged = germ_list
for (i in 1:5){
  merged[[i]] = cbind(germ_list[[i]],tumor_list[[i]][2])
}


##R - Binary analysis (whether VAF greater than threshhold + germline heterozygosity)
#Creating new column for each sample that based on presence of heterozygous germ snp and VAF threshhold (y)
VAF.filt <- function(x,y,z) {
  tmp = x
  for (i in 1:length(tmp)) {
    tmp[[i]][6] = ifelse(tmp[[i]][4] == 1 & (tmp[[i]][5] >= y | tmp[[i]][5] <= z) , tmp[[i]][6] <- 1, tmp[[i]][6] <- 0)
    num = i + 3
    colnames(tmp[[i]])[6] = "V6"
  }
  x = tmp
  return(x)
}

vaf0 = VAF.filt(merged, 0,100)
vaf0.1 = VAF.filt(merged, 0.1,0.9)
vaf0.25 = VAF.filt(merged, 0.25,0.75)
vaf0.5 = VAF.filt(merged, 0.4,0.6)

vaf0 = lapply(vaf0, function(z) z[(names(z) %in% c("chrom_pos","V6"))])
vaf0.1 = lapply(vaf0.1, function(z) z[(names(z) %in% c("chrom_pos","V6"))])
vaf0.25 = lapply(vaf0.25, function(z) z[(names(z) %in% c("chrom_pos","V6"))])
vaf0.5 = lapply(vaf0.5, function(z) z[(names(z) %in% c("chrom_pos","V6"))])

VAF.naming <- function(x,namesdf) {
  tmp = x
  for (i in 1:length(tmp)) {
    num = i + 3
    colnames(tmp[[i]])[2] = colnames(namesdf)[num]
  }
  x = tmp
  return(x)
}

vaf0 = VAF.naming(vaf0, germ_df)
vaf0.1 = VAF.naming(vaf0.1, germ_df)
vaf0.25 = VAF.naming(vaf0.25, germ_df)
vaf0.5 = VAF.naming(vaf0.5, germ_df)

#Remerging list of dataframes
merge.all <- function(x, y) {
  cbind(x, y)
}
vaf0_all <- Reduce(merge.all, vaf0)
vaf0.1_all <- Reduce(merge.all, vaf0.1)
vaf0.25_all <- Reduce(merge.all, vaf0.25)
vaf0.5_all <- Reduce(merge.all, vaf0.5)

vaf0_all = vaf0_all[,-c(3,5,7,9)]
vaf0.1_all = vaf0.1_all[,-c(3,5,7,9)]
vaf0.25_all = vaf0.25_all[,-c(3,5,7,9)]
vaf0.5_all = vaf0.5_all[,-c(3,5,7,9)]
