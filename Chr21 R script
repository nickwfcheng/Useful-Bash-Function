#!/usr/bin/env Rscript
#Import tumor samples into R as list of df
tumor_files = list.files(pattern = "*.filt.txt");
tumor_data = lapply(tumor_files, read.table, sep = '\t', header = F);
tumor_sample_id = gsub('.consensus.*', '', tumor_files);
colnames = c('CHROM', 'POS', 'REF', 'ALT','SAMPLE')
for (i in seq_along(tumor_data)){
  colnames(tumor_data[[i]]) <- colnames
};
#Joining tumor dataframes together
merge.all <- function(x, y) {
  merge(x, y, all=TRUE, by=c('CHROM', 'POS', 'REF', 'ALT'))
};
tumor_data_combined <- Reduce(merge.all, tumor_data);
tumor_sample_id = gsub('.consensus.*', '', tumor_files);
colnames(tumor_data_combined) = c('CHROM', 'POS', 'REF', 'ALT', tumor_sample_id);
rm(merge.all);

#Joining chrom and pos together for tumor samples
chrom_pos = paste(tumor_data_combined$CHROM, tumor_data_combined$POS, sep=':');
tumor_data_combined_1 = cbind(chrom_pos, tumor_data_combined);
rm(chrom_pos);
tumor_data_combined_1 = tumor_data_combined_1[,-2];
tumor_data_combined_1 = tumor_data_combined_1[,-2];

#Import germ samples into R as df
germ_data = read.table(file = 'chr21.txt', sep = '\t', header = T);

#Joining chrom and pos together for germline samples
chrom_pos = paste(germ_data$CHROM, germ_data$POS, sep=':');
germ_data_1 = cbind(chrom_pos, germ_data);
rm(chrom_pos);
germ_data_1 = germ_data_1[,-2];
germ_data_1 = germ_data_1[,-2];

#Cleaning germline sample headings
colnames(germ_data_1) = sub("X", "", colnames(germ_data_1));

#Determine whether variant is present at chr position in each tumor sample
tumor_data_binary = tumor_data_combined_1;
tumor_data_binary[4:ncol(tumor_data_binary)] = ifelse(is.na(tumor_data_binary[4:ncol(tumor_data_binary)]) == T, 0, 1);

#Renaming and removing unneeded files
tumor_data = tumor_data_combined_1;
germ_data = germ_data_1;
rm(germ_data_1);
rm(tumor_data_combined_1);
rm(tumor_data_combined);

#Transposing dataframes
germ_data_t = t(germ_data);
tumor_data_t = t(tumor_data);

#Importing germ and tumor sample ids
id_df = read.csv(file = 'id_no.csv', header = T);
id_df = id_df[,1:3];
colnames(id_df) = c('germ_data_t_id', 'tumor_data_t_id', 'tumor_type');
id_df = id_df[c(3,1,2)];
x = str_split_fixed(id_df$tumor_data_t_id, ",", 10);
id_df = id_df[1:2];
id_df = cbind(id_df, x);

#Transposing germ and tumor data, then extracting column names as dataframes
germ_data_t_id = germ_data_t[,1]; 
germ_data_t_id = germ_data_t_id[-1];
germ_data_t_id = germ_data_t_id[-1];
germ_data_t_id = germ_data_t_id[-1];
for (i in 1:length(germ_data_t_id)) {
  tmp = 3+i
  germ_data_t_id[i] = rownames(germ_data_t)[tmp]
};
germ_data_t_id = as.data.frame(germ_data_t_id);

tumor_data_t_id = tumor_data_t[,1];
tumor_data_t_id = tumor_data_t_id[-1];
tumor_data_t_id = tumor_data_t_id[-1];
tumor_data_t_id = tumor_data_t_id[-1];
for (i in 1:length(tumor_data_t_id)) {
  tmp = 3+i
  tumor_data_t_id[i] = rownames(tumor_data_t)[tmp]
};
tumor_data_t_id = as.data.frame(tumor_data_t_id);

#Matching germ cell id to tumor cell dataframe
tumor_data_t_id[,2] = 1;
colnames(tumor_data_t_id)[2] = 'germ_data_t_id';
for (i in 4:12) {
  tumor_data_t_id$germ_data_t_id = id_df[match(tumor_data_t_id$tumor_data_t_id, id_df[,3]), 2]
  tumor_data_t_id$germ_data_t_id[is.na(tumor_data_t_id$germ_data_t_id)] = id_df[match(tumor_data_t_id$tumor_data_t_id, id_df[,i]), 2]
};
tumor_data_gid = tumor_data_t[4:nrow(tumor_data_t),];
rownames(tumor_data_gid) = tumor_data_t_id[,2];
tumor_data_t_gid = rbind(tumor_data_t[1:3,], tumor_data_t_gid);

#Fixing germ data name
rownames(germ_data_t) = gsub('[.]','-',rownames(germ_data_t));

#Converting transpose dataframes back to normal
tumor_data_gid = t(tumor_data_t_gid);
germ_data_gid = t(germ_data_t);

#Change colnames of binary tumor df to germline ids
tumor_data_binary_gid = tumor_data_binary;
colnames(tumor_data_binary_gid)[4:ncol(tumor_data_binary_gid)] = colnames(tumor_data_gid)[4:ncol(tumor_data_gid)];

#Only keeping VAF values in tumor dataframe
tumor_data_gid_vaf = gsub(';t_alt_count.*', '', tumor_data_gid);
tumor_data_gid_vaf = gsub(';t_ref_count.*', '', tumor_data_gid_vaf);
tumor_data_gid_vaf = gsub('Callers.*', NA, tumor_data_gid_vaf);
tumor_data_gid_vaf = gsub(';.*', '', tumor_data_gid_vaf);
tumor_data_gid_vaf = gsub('VAF=', '', tumor_data_gid_vaf);
tumor_data_gid_vaf[is.na(tumor_data_gid_vaf)] <- 0;
tumor_data_gid_vaf = as.data.frame(tumor_data_gid_vaf);
for (i in 4:ncol(tumor_data_gid_vaf)) {
  tumor_data_gid_vaf[,i] = as.numeric(as.character(tumor_data_gid_vaf[,i]))
};

#Filtering unmatching rows between df's 
germ_data_gid = as.data.frame(germ_data_gid);
library(dplyr);
germ_data_gid[,1] = as.character(germ_data_gid[,1]);
tumor_data_gid_vaf[,1] = as.character(tumor_data_gid_vaf[,1]);
germ_df_filt = semi_join(germ_data_gid, tumor_data_gid_vaf, by = 'chrom_pos');
tumor_df_filt = semi_join(tumor_data_gid_vaf, germ_data_gid, by = 'chrom_pos');
germ_unmatch_pos= setdiff(germ_data_gid[,1], tumor_data_gid_vaf[,1]);
tumor_unmatch_pos = setdiff(tumor_data_gid_vaf[,1], germ_data_gid[,1]);

#Moving filtered dfs to new R file
saveRDS(germ_df_filt, 'germ_df21');
saveRDS(tumor_df_filt, 'tumor_df21');
