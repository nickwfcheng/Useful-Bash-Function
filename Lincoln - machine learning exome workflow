##R - Single matrix mutation type vs samples
#Importing file
COCA_CN_sample = read.table(file = 'COCA-CN.txt', header = T, sep = '\t')

#Only keeping single base substitutions
COCA_CN_single = COCA_CN_sample[COCA_CN_sample$mutation_type == 'single base substitution',]
COCA_CN_single = COCA_CN_single[,-c(2,3,7,8,12,13)]

#Removing duplicated positions
library(data.table)
COCA_CN_single = unique(setDT(COCA_CN_single), by = c("icgc_donor_id" , "chromosome" , "chromosome_start", "chromosome_end"))

#Summarizing snv mutation to one column
COCA_CN_single$mutation = paste(COCA_CN_single$mutated_from_allele, COCA_CN_single$mutated_to_allele, sep=':')

#Removing non-mutations (eg A -> A, T -> T)
COCA_CN_single = COCA_CN_single[COCA_CN_single$mutation != 'A:A' & COCA_CN_single$mutation != 'T:T' & COCA_CN_single$mutation != 'C:C' & COCA_CN_single$mutation != 'G:G',]

#Converting mutation column to factor
COCA_CN_single$mutation = as.factor(COCA_CN_single$mutation)

#Counting number of each type of mutation per sample
library(dplyr)
library(magrittr)
COCA_CN_single %>% 
  group_by(icgc_donor_id, mutation) %>%
  summarise(no_rows = length(mutation)) -> COCA_CN_count

#Normalising counts 
sample_count = aggregate(COCA_CN_count$no_rows, by=list(COCA_CN_count$icgc_donor_id), FUN=sum)
colnames(sample_count) = c('icgc_donor_id', 'sample_total_count')
COCA_CN_count = merge(COCA_CN_count, sample_count, by = 'icgc_donor_id', all = T)
COCA_CN_count$proportion = COCA_CN_count$no_rows/COCA_CN_count$sample_total_count

#Repeating above steps for dinucleotide mutations
library('BSgenome.Hsapiens.UCSC.hg19')
COCA_CN_double = COCA_CN_single
COCA_CN_double$'flank(left)' = as.vector(getSeq(Hsapiens, as.character(paste('chr',COCA_CN_double$chromosome, sep='')), start = COCA_CN_double$chromosome_start - 1, end = COCA_CN_double$chromosome_end - 1))
COCA_CN_double$'flank(right)' = as.vector(getSeq(Hsapiens, as.character(paste('chr',COCA_CN_double$chromosome, sep='')), start = COCA_CN_double$chromosome_start + 1, end = COCA_CN_double$chromosome_end + 1))

COCA_CN_double1 = COCA_CN_double

COCA_CN_double$mutated_from_allele = paste(COCA_CN_double$'flank(left)', COCA_CN_double$mutated_from_allele, sep='')
COCA_CN_double$mutated_to_allele = paste(COCA_CN_double$'flank(left)', COCA_CN_double$mutated_to_allele, sep='')

COCA_CN_double$mutation = paste(COCA_CN_double$mutated_from_allele, COCA_CN_double$mutated_to_allele, sep=':')

COCA_CN_double %>% 
  group_by(icgc_donor_id, mutation) %>%
  summarise(no_rows = length(mutation)) -> COCA_CN_count_di

#Repeating for snv + right flanking nucleotides
COCA_CN_double1$mutated_from_allele = paste(COCA_CN_double1$mutated_from_allele, COCA_CN_double1$'flank(right)', sep='')
COCA_CN_double1$mutated_to_allele = paste(COCA_CN_double1$mutated_to_allele, COCA_CN_double1$'flank(right)', sep='')

COCA_CN_double1$mutation = paste(COCA_CN_double1$mutated_from_allele, COCA_CN_double1$mutated_to_allele, sep=':')

COCA_CN_double1 %>% 
  group_by(icgc_donor_id, mutation) %>%
  summarise(no_rows = length(mutation)) -> COCA_CN_count_di1

#Combining both dinucleotide snv counts
COCA_CN_count_di = rbind(as.data.frame(COCA_CN_count_di), as.data.frame(COCA_CN_count_di1))

sample_count_di = aggregate(COCA_CN_count_di$no_rows, by=list(COCA_CN_count_di$icgc_donor_id), FUN=sum)
colnames(sample_count_di) = c('icgc_donor_id', 'sample_total_count_di')
COCA_CN_count_di = merge(COCA_CN_count_di, sample_count_di, by = 'icgc_donor_id', all = T)
COCA_CN_count_di$proportion = COCA_CN_count_di$no_rows/COCA_CN_count_di$sample_total_count_di

#Repeating above steps fro trinucleotide mutations
COCA_CN_triple = COCA_CN_double
COCA_CN_triple$mutated_from_allele = paste(COCA_CN_triple$mutated_from_allele,COCA_CN_triple$'flank(right)', sep='')
COCA_CN_triple$mutated_to_allele = paste(COCA_CN_triple$mutated_to_allele,COCA_CN_triple$'flank(right)', sep='')
COCA_CN_triple$mutation = paste(COCA_CN_triple$mutated_from_allele, COCA_CN_triple$mutated_to_allele, sep=':')

COCA_CN_triple %>% 
  group_by(icgc_donor_id, mutation) %>%
  summarise(no_rows = length(mutation)) -> COCA_CN_count_tri

sample_count_tri = aggregate(COCA_CN_count_tri$no_rows, by=list(COCA_CN_count_tri$icgc_donor_id), FUN=sum)
colnames(sample_count_tri) = c('icgc_donor_id', 'sample_total_count_tri')
COCA_CN_count_tri = merge(COCA_CN_count_tri, sample_count_tri, by = 'icgc_donor_id', all = T)
COCA_CN_count_tri$proportion = COCA_CN_count_tri$no_rows/COCA_CN_count_tri$sample_total_count_tri

#Checking if reference genome matches 
COCA_CN_single$ref_allele = as.vector(getSeq(Hsapiens, as.character(paste('chr',COCA_CN_single$chromosome, sep='')), start = COCA_CN_single$chromosome_start, end = COCA_CN_single$chromosome_end))
COCA_CN_single$check = ifelse(COCA_CN_single$mutated_from_allele == COCA_CN_single$ref_allele,  0,  1)
sum(COCA_CN_single$check)

#Coercing counts to a list
COCA_CN_list = list()
COCA_CN_list[[1]] = dcast(COCA_CN_count, icgc_donor_id ~ mutation, value.var = 'proportion')
COCA_CN_list[[2]] = dcast(COCA_CN_count_di, icgc_donor_id ~ mutation, value.var = 'proportion')
COCA_CN_list[[3]] = dcast(COCA_CN_count_tri, icgc_donor_id ~ mutation, value.var = 'proportion')



#Joining identical mutations
COCA_CN_matrix = list()
n.combine <- function(x) {
  tmp = x
  mid = ceiling(ncol(tmp)/2)
  for (i in 0:(mid-2)) {
    num = i + 1
    tmp[, (mid - i)] = tmp[,(mid - i)] + tmp[,(mid + num)]
  }
  rownames(tmp) = tmp[,1]
  return(tmp[,1:(ceiling(ncol(tmp)/2))])
}
COCA_CN_matrix[[1]] = n.combine(COCA_CN_list[[1]])

n.combine2 <- function(x) {
  tmp = x
  mid = ceiling(ncol(tmp)/2)
  for (i in 0:(mid-2)) {
    num = i + 1
    tmp[, (mid - i)] = tmp[,(mid - i)] + tmp[,(mid + num)]
    tmp[, (mid + num)] = tmp[,(mid - i)]
  }
  rownames(tmp) = tmp[,1]
  tmp1 = tmp[,c(1,2:13, 17:19, 23:38, 42:44, 48:49, 52:54, 58:60, 77:79, 83:85)]
  return(tmp1)
}
COCA_CN_matrix[[2]] = n.combine2(COCA_CN_list[[2]])

n.combine3 <- function(x) {
  tmp = x
  mid = ceiling(ncol(tmp)/2)
  for (i in 0:(mid-2)) {
    num = i + 1
    tmp[, (mid - i)] = tmp[,(mid - i)] + tmp[,(mid + num)]
    tmp[, (mid + num)] = tmp[,(mid - i)]
  }
  rownames(tmp) = tmp[,1]
  tmp1 = tmp[,c(1, 2:25, 50:73, 98:121, 146:169)]
  return(tmp1)
}
COCA_CN_matrix[[3]] = n.combine3(COCA_CN_list[[3]])


COCA_CN_matrix = lapply(COCA_CN_matrix ,function(x) replace(x,is.na(x),0))

#Plotting heatmaps for each mutation type
library(pheatmap)
COCA_CN_snv_plot = pheatmap(COCA_CN_matrix[[1]][,-1], cluster_rows = F, cluster_cols = F, show_rownames = F)
COCA_CN_dnv_plot = pheatmap(COCA_CN_matrix[[2]][,-1], cluster_rows = F, cluster_cols = F, show_rownames = F)
COCA_CN_tnv_plot = pheatmap(COCA_CN_matrix[[3]][,-1], cluster_rows = F, cluster_cols = F, show_rownames = F)

#Combining all three groups of mutations
merge.all <- function(x, y) {
  merge(x, y, all=TRUE, by=c('icgc_donor_id'))
}
COCA_CN = Reduce(merge.all, COCA_CN_matrix)

#changing column names to match learner
colnames(COCA_CN) = gsub(':', '..', colnames(COCA_CN))

#Reading updated mean and sd for exo/wgs model
mean.mut.wgs = readRDS('mean.mut.wgs.RDS')
mean.mut.exo = readRDS('mean.mut.exo.RDS')
sd.mut.wgs = readRDS('sd.mut.wgs.RDS')
sd.mut.exo = readRDS('sd.mut.exo.RDS')
mut.wgs.mod.list = readRDS('mut.wgs.mod.list.RDS')
mut.exo.mod.list = readRDS('mut.exo.mod.list.RDS')

#Normalising data to mean and sd
COCA_CN_wgs = (COCA_CN[,-1] - mean.mut.wgs)/sd.mut.wgs
COCA_CN_exo = (COCA_CN[,-1] - mean.mut.exo)/sd.mut.exo

#Applinyg machine learning model to dataset
library(mlr)
library(randomForest)
pred.test <- function(x, y, z, donor) {
  tmp = list()
  for (i in 1:4) {
    tmp[[i]] = as.data.frame(predict(x[[i]]$learner.model, newdata = y))
    tmp1 = predict(x[[i]]$learner.model, newdata = y, type = "prob")
    tmp2 = z
    tmp[[i]] = cbind(tmp1, tmp[[i]])
    colnames(tmp[[i]])[3] = 'pred.class'
    tmp[[i]][4] = z
    colnames(tmp[[i]])[4] = 'class'
    tmp[[i]] = cbind(donor, tmp[[i]])
  }
  return(tmp)
}
pred.test.COCA_CN_wgs = pred.test(mut.wgs.mod.list, COCA_CN_wgs, 'none', COCA_CN_list[[1]][,1])
pred.test.COCA_CN_exo = pred.test(mut.exo.mod.list, COCA_CN_exo, 'none', COCA_CN_list[[1]][,1])

saveRDS(pred.test.COCA_CN_wgs, 'COCA_CN_wgs.RDS')
saveRDS(pred.test.COCA_CN_exo, 'COCA_CN_exo.RDS')

#Creating Bins
COCA_CN_single$bin = ceiling(COCA_CN_single$chromosome_start / 1000000)
COCA_CN_single$bin = paste(COCA_CN_single$chromosome, (COCA_CN_single$bin - 1), sep = '.')
COCA_CN_single$bin = paste('chr', COCA_CN_single$bin, sep = '')

#Counting bins
COCA_CN_single %>% 
  group_by(icgc_donor_id, bin) %>%
  summarise(no_rows = length(bin)) -> COCA_CN_bin_count

#Normalising bin counts 
sample_count = aggregate(COCA_CN_bin_count$no_rows, by=list(COCA_CN_bin_count$icgc_donor_id), FUN=sum)
colnames(sample_count) = c('icgc_donor_id', 'sample_total_count')
COCA_CN_bin_count = merge(COCA_CN_bin_count, sample_count, by = 'icgc_donor_id', all = T)
COCA_CN_bin_count$proportion = COCA_CN_bin_count$no_rows/COCA_CN_bin_count$sample_total_count

#Converting bin counts to matrix
COCA_CN_list[[4]] = dcast(COCA_CN_bin_count, icgc_donor_id ~ bin, value.var = 'proportion')

#Converting NAs to 0
COCA_CN_list = lapply(COCA_CN_list ,function(x) replace(x,is.na(x),0))
COCA_CN_matrix[[4]] = COCA_CN_list[[4]]

COCA_CN_bin_exo = COCA_CN_matrix[[4]]
COCA_CN_bin_wgs = COCA_CN_matrix[[4]]

colnames(COCA_CN_bin_wgs)[-1] = paste('SNV', colnames(COCA_CN_bin_wgs)[-1], sep = ".")
colnames(COCA_CN_bin_exo)[-1] = paste('EXS', colnames(COCA_CN_bin_exo)[-1], sep = ".")

##WIP##
#Add in missing columns to dfs
add.cols <- function(x, y) {
  tmp = setdiff(names(y), colnames(x))
  tmp1 = as.data.frame(setNames(replicate(length(tmp),numeric(0), simplify = F), tmp))
  tmp1[1:nrow(x),] = 0
  tmp2 = x
  tmp2 = cbind(tmp2, tmp1)
  tmp.names = tmp2[,1]
  tmp2 = tmp2[,-1]
  tmp2 = tmp2[,match(names(y), colnames(tmp2))]
  tmp2 = cbind(tmp.names, tmp2)
  return(tmp2)
}

COCA_CN_bin_wgs = add.cols(COCA_CN_bin_wgs, mean.snv.bins.wgs)

#Normalising data with mean and sd
mean.sd.norm <- function(data, mean, sd) {
  tmp = data[,-1]
  for (i in 1:ncol(data[,-1])) {
    tmp[,i] = (tmp[,i] - mean[i]) / sd[i]
  }
  return(tmp)
}

COCA_CN_bin_wgs = mean.sd.norm(COCA_CN_bin_wgs, mean.snv.bins.wgs, sd.snv.bins.wgs)

#combining mutation info and bin snv counts
COCA_CN_bin_wgs = cbind(COCA_CN_bin_wgs, COCA_CN_wgs)

COCA_CN_bin_wgs[is.na(COCA_CN_bin_wgs)] <- 0
#Applying machine learning model to dataset
library(mlr)
library(randomForest)
pred.test <- function(model, data, class, donor) {
  tmp = list()
  for (i in 1:4) {
    tmp[[i]] = as.data.frame(predict(model[[i]]$learner.model, newdata = data))
    tmp1 = predict(model[[i]]$learner.model, newdata = data, type = "prob")
    tmp2 = class
    tmp[[i]] = cbind(tmp1, tmp[[i]])
    colnames(tmp[[i]])[3] = 'pred.class'
    tmp[[i]][4] = class
    colnames(tmp[[i]])[4] = 'class'
    tmp[[i]] = cbind(donor, tmp[[i]])
  }
  return(tmp)
}
pred.test.COCA_CN_bin_wgs = pred.test(mut.wgs.snv.mod.list, COCA_CN_bin_wgs, 'none', COCA_CN_matrix[[4]][,1])


saveRDS(pred.test.COCA_CN_bin_wgs, 'COCA_CN_bin_wgs.RDS')
save.image('COCA_CN_wgs.RData')

